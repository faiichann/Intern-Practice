{"ast":null,"code":"var _jsxFileName = \"C:\\\\Vonder\\\\my-app\\\\src\\\\useCalculate.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const useCalculate = () => {\n  _s();\n\n  const [num1, setNum1] = useState(0);\n  const [num2, setNum2] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [digitalCal, setDigitalCal] = useState(\" 0 \");\n  const plusCal = useCallback(() => {\n    setTotal(num1 + num2);\n  }, [num1, num2]);\n  const minusCal = useCallback(() => {\n    setTotal(num1 - num2);\n  }, [num1, num2]);\n  const multiplyCal = useCallback(() => {\n    setTotal(num1 * num2);\n  }, [num1, num2]);\n  const DivideCal = useCallback(() => {\n    setTotal(num1 / num2);\n  }, [num1, num2]);\n  const resetCal = useCallback(() => {\n    setNum1(0);\n    setNum2(0);\n    setTotal(0);\n  }, []);\n  const EvalCal = useCallback(() => {\n    setDigitalCal(eval(digitalCal));\n  }, [digitalCal]);\n  useEffect(() => {\n    if (total) {\n      console.log('Total', total);\n      console.log('Eval', digitalCal);\n    }\n  }, [total, digitalCal]);\n  const Calculator = useMemo(() => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number 1 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: num1,\n          onChange: e => setNum1(+e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 23\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number 2 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: num2,\n          onChange: e => setNum2(+e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 23\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Cal :\", num1, \" + \", num2, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Result : \", total.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }, this);\n  }, [num1, num2, total]);\n  const AllCalculator = useMemo(() => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Input : \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: digitalCal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 20\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Result : \", eval(digitalCal).toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }, [digitalCal]);\n  return {\n    plusCal,\n    Calculator,\n    minusCal,\n    multiplyCal,\n    DivideCal,\n    resetCal,\n    AllCalculator,\n    EvalCal\n  };\n};\n\n_s(useCalculate, \"WQp41FcJiwYtXcDMQC2nx8dl1GA=\");","map":{"version":3,"sources":["C:/Vonder/my-app/src/useCalculate.tsx"],"names":["useCallback","useEffect","useMemo","useState","useCalculate","num1","setNum1","num2","setNum2","total","setTotal","digitalCal","setDigitalCal","plusCal","minusCal","multiplyCal","DivideCal","resetCal","EvalCal","eval","console","log","Calculator","e","target","value","toFixed","AllCalculator"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\r\n\r\nexport const useCalculate = () => {\r\n    const [num1, setNum1] = useState<number>(0);\r\n    const [num2, setNum2] = useState<number>(0);\r\n    const [total, setTotal] = useState<number>(0);\r\n    const [digitalCal, setDigitalCal ] = useState<string>(\" 0 \");\r\n\r\n    const plusCal = useCallback(() =>{\r\n        setTotal(num1+num2)\r\n    },[num1, num2])\r\n\r\n    const minusCal = useCallback(() =>{\r\n        setTotal(num1-num2)\r\n    },[num1, num2])\r\n\r\n    const multiplyCal = useCallback(() =>{\r\n        setTotal(num1*num2)\r\n    },[num1, num2])\r\n\r\n    const DivideCal = useCallback(() =>{\r\n        setTotal(num1/num2);\r\n    },[num1, num2])\r\n\r\n    const resetCal = useCallback(() =>{\r\n        setNum1(0);\r\n        setNum2(0);\r\n        setTotal(0)\r\n    },[])\r\n\r\n    const EvalCal = useCallback(() =>{\r\n        setDigitalCal(eval(digitalCal));\r\n    },[digitalCal])\r\n\r\n    useEffect(() =>{\r\n        if (total){\r\n            console.log('Total', total)\r\n            console.log('Eval', digitalCal)\r\n        }\r\n    }, [ total, digitalCal])\r\n\r\n\r\n    \r\n    const Calculator = useMemo(() =>\r\n    {\r\n        return<div>\r\n        <p>Number 1 : <input  value={num1} onChange={e => setNum1(+e.target.value)}/> </p> \r\n        <p>Number 2 : <input  value={num2} onChange={e => setNum2(+e.target.value)}/> </p>\r\n        <h4>Cal :{num1} + {num2} </h4>\r\n        <h4>Result : {total.toFixed(2)}</h4>\r\n        </div>\r\n    },[num1, num2, total])\r\n\r\n    const AllCalculator = useMemo(() =>\r\n    {\r\n        return <>\r\n        <p>Input : <input type=\"text\" value={digitalCal}/> </p>\r\n        <h4>Result : {eval(digitalCal).toFixed(2)}</h4>\r\n        </>\r\n    },[digitalCal])\r\n    return {plusCal, Calculator, minusCal, multiplyCal, DivideCal, resetCal,AllCalculator, EvalCal }\r\n}"]},"metadata":{},"sourceType":"module"}