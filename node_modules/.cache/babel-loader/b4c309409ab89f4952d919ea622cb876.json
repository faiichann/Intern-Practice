{"ast":null,"code":"var _jsxFileName = \"C:\\\\Vonder\\\\my-app\\\\src\\\\useCalculate.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useCalculate = () => {\n  _s();\n\n  const [num1, setNum1] = useState(0);\n  const [num2, setNum2] = useState(0);\n  const [total, setTotal] = useState(0);\n  const plusCal = useCallback(() => {\n    setTotal(num1 + num2);\n    console.log('Total', total);\n  }, [num1, num2, total]);\n  useEffect(() => {\n    if (total) {\n      plusCal();\n    }\n  }, [plusCal, total]);\n  const Calculator = useMemo(() => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number 1 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: num1,\n          onChange: e => setNum1(+e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 23\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number 2 : \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: num2,\n          onChange: e => setNum2(+e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 23\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Cal :\", num1, \" + \", num2, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Result : \", total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 15\n    }, this);\n  }, [num1, num2, total]);\n  return {\n    plusCal,\n    Calculator\n  };\n};\n\n_s(useCalculate, \"BPxrmxUeU74qM4kcjVa3FSZA8LA=\");","map":{"version":3,"sources":["C:/Vonder/my-app/src/useCalculate.tsx"],"names":["useCallback","useEffect","useMemo","useState","useCalculate","num1","setNum1","num2","setNum2","total","setTotal","plusCal","console","log","Calculator","e","target","value"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAS,CAAT,CAAhC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAS,CAAT,CAAhC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAS,CAAT,CAAlC;AAEA,QAAMQ,OAAO,GAAGX,WAAW,CAAC,MAAK;AAC7BU,IAAAA,QAAQ,CAACL,IAAI,GAACE,IAAN,CAAR;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB;AACH,GAH0B,EAGzB,CAACJ,IAAD,EAAOE,IAAP,EAAaE,KAAb,CAHyB,CAA3B;AAKAR,EAAAA,SAAS,CAAC,MAAK;AACX,QAAIQ,KAAJ,EAAU;AAENE,MAAAA,OAAO;AACV;AACJ,GALQ,EAKN,CAACA,OAAD,EAAUF,KAAV,CALM,CAAT;AAQA,QAAMK,UAAU,GAAGZ,OAAO,CAAC,MAC3B;AACI,wBAAM;AAAA,8BACN;AAAA,+CAAc;AAAQ,UAAA,KAAK,EAAEG,IAAf;AAAqB,UAAA,QAAQ,EAAEU,CAAC,IAAIT,OAAO,CAAC,CAACS,CAAC,CAACC,MAAF,CAASC,KAAX;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA,cADM,eAEN;AAAA,+CAAc;AAAQ,UAAA,KAAK,EAAEV,IAAf;AAAqB,UAAA,QAAQ,EAAEQ,CAAC,IAAIP,OAAO,CAAC,CAACO,CAAC,CAACC,MAAF,CAASC,KAAX;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA,cAFM,eAGN;AAAA,4BAAUZ,IAAV,SAAmBE,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHM,eAIN;AAAA,gCAAcE,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA,cAJM;AAAA;AAAA;AAAA;AAAA;AAAA,YAAN;AAMH,GARyB,EAQxB,CAACJ,IAAD,EAAOE,IAAP,EAAaE,KAAb,CARwB,CAA1B;AAUA,SAAO;AAACE,IAAAA,OAAD;AAAUG,IAAAA;AAAV,GAAP;AACH,CA7BM;;GAAMV,Y","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\r\n\r\nexport const useCalculate = () => {\r\n    const [num1, setNum1] = useState<number>(0);\r\n    const [num2, setNum2] = useState<number>(0);\r\n    const [total, setTotal] = useState<number>(0);\r\n\r\n    const plusCal = useCallback(() =>{\r\n        setTotal(num1+num2)\r\n        console.log('Total', total)\r\n    },[num1, num2, total])\r\n\r\n    useEffect(() =>{\r\n        if (total){\r\n            \r\n            plusCal()\r\n        }\r\n    }, [plusCal, total])\r\n\r\n    \r\n    const Calculator = useMemo(() =>\r\n    {\r\n        return<div>\r\n        <p>Number 1 : <input  value={num1} onChange={e => setNum1(+e.target.value)}/> </p> \r\n        <p>Number 2 : <input  value={num2} onChange={e => setNum2(+e.target.value)}/> </p>\r\n        <h4>Cal :{num1} + {num2} </h4>\r\n        <h4>Result : {total}</h4>\r\n        </div>\r\n    },[num1, num2, total])\r\n\r\n    return {plusCal, Calculator}\r\n}"]},"metadata":{},"sourceType":"module"}